#!/usr/bin/python

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import logging

yumbin='/usr/bin/yum'

DOCUMENTATION = '''
---
module: cpacman
short_description: Manages packages with the I(yum) package manager
description:
     - Will install, upgrade, remove, and list packages with the I(yum) package manager.
options:
  name:
    description:
      - "Package name. Yum-like specs are unsupported at the moment"
    required: true
    default: null
    aliases: []
  list:
    description:
      - Various non-idempotent commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples.
    required: false
    default: null
  state:
    description:
      - Whether to install (C(present), C(latest)), or schedule installation of a package.
    required: false
    choices: [ "present", "latest", "scheduled" ]
    default: "present"

  config:
    description:
      - The remote yum configuration file to use for the transaction.
    required: false
    version_added: "0.6"
    default: null
    aliases: []

notes: []
# informational: requirements for nodes
requirements: [ yum, rpm ]
author: Dmitry Makovey
'''

EXAMPLES = '''
- cpacman: name=httpd state=installed servername=x.y.com
- cpacman: name=httpd state=installed servername=x.y.com config=/etc/cpacman/classes.conf
'''


def list_packages(module,server,specs):
    pass

def list_servers(module,server,specs):
    pass

def is_installed(module,server,pkg_spec):
    pl=server.listPackages(locate_alternatives=0,skip_missing=1,ignore_policy=1)
    # p=pl.newPackage(name=pkg_spec)
    # print p
    if pl.has_key(pkg_spec):
        return True
    else:
        return False
    # p.render()
    
    raise "Not implemented"

    ###NOTIMPLEMENTED

    ###FAKES
    if pkg_spec=='openstack-utils':
        return True
    else:
        return False

def install_packages(module,server,state,specs,schedule_only=False,yum_basecmd=None,bin_dir='/usr/bin'):
    """Install packages on specified server"""
    ## raise "Not implemented"
    
    res = {}
    res['results'] = []
    res['msg'] = 'Packages {0} cannot be installed'.format(str(specs))
    res['changed'] = False
    res['failed'] = True
    res['rc'] = 0
    
    if state in ('present','installed'):
        install_pkgs=[]
        for spec in specs:
            if not is_installed(module,server,spec):
                install_pkgs.append(spec)
    else:
        ## 'latest' we just install
        install_pkgs=specs
    if not install_pkgs:
        ## nothing to install
        res['rc']=0
        res['failed']=False
        res['changed']=False
        res['results']=''
        res['msg']='All packages installed'
    for spec in install_pkgs:
        ##XXX
        ## very crude implementation
        if yum_basecmd is None:
            raise "Missing yum_basecmd"
        cmd=yum_basecmd+['install']+specs
        rc,out,err = module.run_command(cmd)
        # very ugly hack checking stderr
        # but yum exit codes are not usefull at all here
        if 'No problems noticed' in err :
            # CPacMan exits via exception
            # that leaves rc as 1
            res['failed']=False
            rc=0
        res['changed']=True
        res['rc']=rc
        res['results']=out
        res['msg']=err
    ### NOTE for CPacMan: need to use -B in scp invocation
    ## cmd=['scp', '-B', '-o' , 'ForwardAgent=yes', '/home/dimon/work/python/cpacman-0.7/installer.py', 'root@nova.phs.net:']
    ## rc,out,err = module.run_command(cmd)
    ## res['failed']=True
    ## res['rc']=rc
    ## res['msg']=err
    ## res['results']=out
    ## module.exit_json(**res)

    if not schedule_only:
        ## ok, here we've got to install things
        cmd=[os.path.join(bin_dir,'installer.py'),'-h',server.getServerName(),'-u','root']
        rc,out,err = module.run_command(cmd)
        res['msg']=err
        res['results']=out
        if rc:
            res['failed']=True
            res['rc']=rc
            #res['msg']=err
            #res['results']=out
            module.exit_json(**res)
        #else:
            #res['msg']=err
            #res['results']=out
        cmd=[os.path.join(bin_dir,'confirm.py'),'-h',server.getServerName(),'-u','root']
        rc,out,err = module.run_command(cmd)
        res['msg']=err
        res['results']=out
        if rc:
            res['failed']=True
            res['rc']=rc
            # res['msg']=err
            # res['results']=out
            module.exit_json(**res)
        #else:
            #res['msg']=res['msg']+err
            #res['results']=res['results']+out
        
    module.exit_json(**res)

def ensure(module, state, pkgspec, server, bin_dir='/usr/bin'):
    pkgs=pkgspec.split(',')
    yum_basecmd = [yumbin, '-d', '2', '-y', '--servername', server.getServerName(), '--schedule']
    if state in ('installed','present') :
        only_schedule=False
    elif state == 'scheduled':
        only_schedule=True
    install_packages(module, 
            server, 
            state, 
            pkgs, 
            schedule_only=only_schedule, 
            yum_basecmd=yum_basecmd,
            bin_dir=bin_dir)
 

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name=dict(aliases=['pkg']),
            # removed==absent, installed==present, these are accepted as aliases
            state=dict(default='installed', choices=['present','installed','latest','scheduled']),
            servername=dict(),
            list=dict(),
            ## list=dict(default='', choices=['packages,servers']),
            ## specs=dict(),
            config=dict(default='/etc/cpacman/classes.conf'),

            disable_gpg_check=dict(required=False, default="no",
                                   choices=BOOLEANS, type='bool'),
        ),
        ## required_one_of = [['name','list']],
        required_one_of = [['name']],
        mutually_exclusive = [['name','list']],
        supports_check_mode = True
    )

    params = module.params

    cp=configparser.ConfigParser()
    cp.read(params['config'])
    # server_db=cp.get('DEFAULT','server_db')
    cpm_defaults=cp.defaults()
    lib_dir=cpm_defaults.get('lib_dir')
    bin_dir=cpm_defaults.get('bin_dir')
    sys.path.append(lib_dir)
    ## logging.basicConfig(filename='/tmp/ansible.log',level=logging.DEBUG)
    ## logging.info(bin_dir)
    ## logging.info(lib_dir)
    import cpacman.Server
    serverdb=cpacman.Server.ServerDB()


    if params['list']:
        if not repoquery:
            module.fail_json(msg="repoquery is required to use list= with this module. Please install the yum-utils package.")
        if params['list']=='packages':
            results = dict(results=list_packages(module, params['conf_file'], params['list']))
        elif params['list']=='servers':
            results = dict(results=list_servers(module, params['conf_file'], params['list']))
        module.exit_json(**results)

    else:
        pkg = params['name']
        state = params['state']
        servername = params['servername']
        server=serverdb.getServer(params['servername'])
        res = ensure(module, state=state, pkgspec=pkg, server=server, bin_dir=bin_dir)
        module.fail_json(msg="we should never get here unless this all failed", **res)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()

